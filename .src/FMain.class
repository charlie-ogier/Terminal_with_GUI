' Gambas class file

bSkip As Boolean
pBash As Process
sFolder As String = User.Home &/ ".GUITerminal"
sHistory As New String[]
sCommands As New String[] 
hTBButton As ToolButton
hLabel As Label
fFontSize As Float = 9

Public Sub Form_Open()

GetCommands
SetUp

End

Public Sub GetCommands()
Dim sEnv As String[] = Split(Application.Env["PATH"], ":")
Dim sTemp As String

sCommands.Clear

For Each sTemp In sEnv
  Try sCommands.insert(Dir(sTemp))
Next

sCommands.sort(gb.IgnoreCase)

End

Public Sub SetUp()

If Settings["window", False] Then
  Settings.read(Me, "Window")                                                   'Get details of the last window position and size
Else
  Me.Width = Desktop.Width - ((Desktop.Width / 100) * 10)
  Me.Height = Desktop.Height - ((Desktop.Height / 100) * 10)
  Me.Center
Endif

Me.show
sHistory = Split(File.Load(User.home &/ ".bash_history"), gb.NewLine)
pBash = TerminalView1.Exec(["bash"])
SetUpHistory
ManPage("man")
TerminalView1.Font = Font[Settings["font", "Monospace,11"]]
Settings.Save
TerminalView1.setfocus
If Settings["fortune", True] Then Timer1.Trigger 
CreateSelector
AllRadio_Click(Settings["sValue", "RadioButtonNone"])
'TerminalView1.Background = Settings["background", Color.Black]
'TerminalView1.Foreground = Settings["background", Color.White]
If Not Exist(sFolder) Then Mkdir sFolder

End

Public Sub Form_Close()

pBash.close
Settings.Write(Me, "Window")                                                  'Store the window position and size

End

Public Sub ButtonClear_Click()

TerminalView1.setfocus
Desktop.Sendkeys("{[Control_L]A}" & "{[Control_L]K}" & "clear" & "[Return]")

End

Public Sub SetUpHistory()
Dim siCount As Short

GridViewHistory.Clear

With GridViewHistory
  .Columns.count = 1
  .Rows.Count = sHistory.Count
End With

For siCount = 0 To sHistory.Max
  GridViewHistory[siCount, 0].text = sHistory[siCount]
Next

GridViewHistory.Scroll(0, GridViewHistory.ScrollHeight)

TextBoxSearch.SetFocus
LabelHistory.Text = Str(sHistory.Count) & " Items"

End

Public Sub AllRadio_Click(Optional sValue As String)
Dim sName As String = Last.Name

If sValue Then 
  sName = sValue
Else
  sName = Last.Name
End If

VBoxMan.Visible = False
VBoxHistory.Visible = False
VBoxCommands.Visible = False

Select Case sName
  Case "RadioButtonManPage"
    VBoxMan.Visible = True
    TerminalView1.SetFocus
    sValue = "RadioButtonManPage"
    If Not RadioButtonManPage.value Then RadioButtonManPage.value = True
  Case "RadioButtonHistory"
    VBoxHistory.Visible = True
    SetUpHistory
    sValue = "RadioButtonHistory"
    If Not RadioButtonHistory.value Then RadioButtonHistory.value = True
  Case "RadioButtonCommands"
    VBoxCommands.Visible = True
    Commands
    sValue = "RadioButtonCommands"
    If Not RadioButtonCommands.value Then RadioButtonCommands.value = True
  Case "RadioButtonNone"
    If Not RadioButtonNone.value Then RadioButtonNone.value = True
End Select

Settings["sValue"] = sValue
Settings.Save

End

Public Sub GridViewHistory_Click()
Dim sManP As String

ClearTerminalLine

TerminalView1.setfocus
SendThekeys(GridViewHistory[Last.Row, 0].text)

sManP = Replace(GridViewHistory[Last.Row, 0].text, "sudo", "")

ManPage(sManP)

End

Public Sub TextBoxSearch_Change()
Dim siCount As Short
Dim sTemp As String
Dim sFound As New String[]

For Each sTemp In sHistory
  If InStr(sTemp, TextBoxSearch.text, 1, gb.IgnoreCase) Then sFound.Add(sTemp)
Next

With GridViewHistory
  .Clear
  .Columns.count = 1
  .Rows.count = sFound.Count
End With

If TextBoxSearch.text = "" Then 
  sFound = sHistory.Copy()
  GridViewHistory.Rows.count = sFound.Count
End If

 For siCount = 0 To sFound.Max
  GridViewHistory[siCount, 0].text = sFound[siCount]
Next

LabelFound.text = Str(sFound.Count) & " Items found"

TextBoxSearch.SetFocus

End

Public Sub ManPage(sInputMan As String)
Dim sManPage As String

Shell "man " & sInputMan To sManPage 
Wait
If Left(sManPage, 20) = Left(TextAreaMan.text, 20) Then Return
If Not sManPage Then Return

TextAreaMan.text = sManPage

If sManPage Then 
  LabelManPage.text = Trim(Mid(sManPage, 1, InStr(sManPage, " ")))
  LabelManPage.Font.Bold = True
  LabelManPage.Font.Size = fFontSize + 3
  TimerManPage.Start
Else
  LabelManPage.text = ""
Endif

TextAreaMan.Pos = 0
TerminalView1.SetFocus

End

Public Sub TimerManPage_Timer()

LabelManPage.Font.Size = LabelManPage.Font.Size - 0.01

If LabelManPage.Font.Size <= fFontSize Then
  TimerManPage.Stop
  LabelManPage.Font.Bold = False
Endif

End

Public Sub Timer1_Timer()

TerminalView1.SetFocus
Desktop.Sendkeys("fortune" & "[Return]")

End

Public Sub TerminalView1_KeyRelease()
Dim sLast As String = TerminalView1.text
Dim sTemp As String

If bSkip Then Return
If Trim(sLast) Ends "$" Then Return

sTemp = Mid(sLast, RInStr(sLast, "$"))
If TextAreaMan.text Not Begins UCase(sTemp) Then ManPage(sTemp)

Catch

End

Public Sub TextBoxSearch_LostFocus()

TimerFocus.Start

End

Public Sub TimerFocus_Timer()

TerminalView1.SetFocus

End

Public Sub TextBoxSearch_GotFocus()

TimerFocus.stop

End

Public Sub GridViewHistory_Enter()

bSkip = True

End

Public Sub GridViewHistory_Leave()

bSkip = False

End

Public Sub Commands(Optional sChar As String)
Dim siCount, siCounter, siSpeed As Short
Dim sName As String
Dim bTrigger, bBackGround, bSpeedFileExists, bFound As Boolean
Dim sSpeedLoad, sSpeedSave As New String[]

Try sName = Left(GridViewCommands[0, 0].text)
If sName And If Not sChar Then Return

LabelCommands.Text = "Working"
GridViewCommands.Enabled = False
HBoxCommandSelect.Enabled = False
Wait

If Not sChar Then sChar = "0"

With GridViewCommands
  .Clear
  .Columns.count = 2
  .Rows.count = 0
End With

If sChar = "0" Then 
  For siCount = 0 To sCommands.Max
    If Not IsLetter(Mid(sCommands[siCount], 1, 1)) Then
      GridViewCommands.Rows.count += 1
      GridViewCommands[siCounter, 0].text = sCommands[siCount]
      Inc siCounter
      bTrigger = True
    Endif
    If IsLetter(Mid(sCommands[siCount], 1, 1)) Then Break
  Next
Else
  For siCount = 0 To sCommands.Max
    If LCase(sCommands[siCount]) Begins LCase(sChar) Then
      GridViewCommands.Rows.count += 1
      GridViewCommands[siCounter, 0].text = sCommands[siCount]
      Inc siCounter
      bTrigger = True
    Endif
    If bTrigger And LCase(sCommands[siCount]) Not Begins LCase(sChar) Then Break
  Next
Endif

GridViewCommands.Columns.Width = -1
LabelCommands.Font.bold = True
LabelCommands.Font.Size = LabelCommands.Font.Size + 2

If Exist(sFolder &/ LCase(sChar) & ".csv") Then 
  sSpeedLoad = Split(File.Load(sFolder &/ LCase(sChar) & ".csv"), gb.NewLine)
  bSpeedFileExists = True
End If

For siCount = 0 To GridViewCommands.Rows.count - 1
  bFound = False
  If Not bSpeedFileExists Then LabelCommands.Text = Str(siCount + 1) & " of " & Str(GridViewCommands.Rows.count) & "   (" & UCase(sChar) & ")"
  If siCount = GridViewCommands.Rows.count - 1 Then LabelCommands.Text = Str(siCount + 1) & " of " & Str(GridViewCommands.Rows.count) & "   (" & UCase(sChar) & ")"
  If bSpeedFileExists Then
    For siSpeed = 0 To sSpeedLoad.Max
      If InStr(sSpeedLoad[siSpeed], GridViewCommands[siCount, 0].text) Then
        GridViewCommands[siCount, 1].text = Split(sSpeedLoad[siSpeed], "`")[1]
        bFound = True
        Break
      Endif
    Next
  End If

  If Not bSpeedFileExists Or Not bFound
    Shell "man " & GridViewCommands[siCount, 0].text To sName
    sName = Mid(sName, InStr(sName, "NAME\n") + 5)
    If Trim(sName) = "" Then
      GridViewCommands[siCount, 1].text = "No man page found"
    Else
      GridViewCommands[siCount, 1].text = Trim(Mid(sName, 1, InStr(sName, gb.NewLine) - 1))
    End If
  Endif

  If bBackGround Then
    GridViewCommands[siCount, 0].Background = Color.Background
    GridViewCommands[siCount, 1].Background = Color.Background
  Endif
  bBackGround = Not bBackGround
  If Not bSpeedFileExists Then Wait
Next

HBoxCommandSelect.Enabled = True
GridViewCommands.Enabled = True
LabelCommands.Font.bold = False
LabelCommands.Font.Size = LabelCommands.Font.Size - 2
Wait

For siSpeed = 0 To GridViewCommands.Rows.count - 1
  sSpeedSave.Add(GridViewCommands[siSpeed, 0].text & "`" & GridViewCommands[siSpeed, 1].text)
Next

If Exist(sFolder &/ LCase(sChar) & ".csv") Then Try Kill sFolder &/ LCase(sChar) & ".csv"
File.Save(sFolder &/ LCase(sChar) & ".csv", sSpeedSave.Join(gb.newline))

End

Public Sub CreateSelector()
Dim siCount As Short

For siCount = 0 To 26
  hTBButton = New ToolButton(HBoxCommandSelect) As "CommandLetters"
  If siCount = 0 Then
    With hTBButton
    .H = 28
    .W = 28
    .Text = "0"
    .border = True
    .Font.Bold = True
    .Tooltip = "Show all commands not starting with a letter"
  End With
  Continue
  Endif
  With hTBButton
    .H = 28
    .W = 28
    .Text = Chr(64 + siCount)
    .border = True
    .Tooltip = "Show all commands starting with " & Chr(64 + siCount)
  End With
  Next

hLabel = New Label(HBoxCommandSelect) As "LabelCommandTotal"
With hLabel
  .Height = 28
  .Width = 100
  .Alignment = Align.Right
  .AutoResize = True
  .Text = "Total commands = " & Str(sCommands.Max)
End With

CommandLetters_click

End

Public Sub CommandLetters_click()
Dim oObj As Object
Dim sLast As String = Left(Last.text, 1)

If Not sLast Then sLast = "a"

GetCommands
Commands(sLast)

For Each oObj In HBoxCommandSelect.Children
  If oObj.Name <> "CommandLetters" Then Continue
  If oObj.text = sLast Then 
    oObj.Font.Bold = True
  Else
    oObj.Font.Bold = False
  End If
  If oObj.text Not Ends "." Then 
    If Exist(sFolder &/ LCase(oObj.Text & ".csv")) Then
      oObj.Text &= "."
      oObj.Tooltip &= "\nData cashed for faster access"
    Endif
  Endif
Next

Wait

End

Public Sub ClearTerminalLine()

TerminalView1.setfocus
Desktop.Sendkeys("{[Control_L]A}" "{[Control_L]K}")

End

Public Sub GridViewCommands_Click()

If GridViewCommands.Enabled = False Then Return

ClearTerminalLine

TerminalView1.setfocus
SendThekeys(GridViewCommands[Last.Row, 0].text)

Wait 0.3 ''Needed to allow for TerminalView1_KeyRelease to finish 
ManPage(GridViewCommands[Last.Row, 0].text)

End

Public Sub TerminalMenu_Click()
Dim sTemp As String

TerminalView1.setfocus
Select Case Last.Name
  Case "MenuPaste"
    sTemp = Clipboard.Paste("text/plain")
      SendTheKeys(sTemp)
  Case "MenuCopy"
   TerminalView1.Copy
End Select

End

Public Sub AllButtons_Click()

If Last.name = "ToolButtonClose" Then Me.Close
If Last.name = "ToolButtonAbout" Then About.ShowModal
If Last.name = "ToolButtonSettings" Then
  Configuration.Show
  Me.Close
Endif

End

Public Sub SendTheKeys(sText As String)
Dim siCount As Short

TerminalView1.setfocus

For siCount = 1 To Len(sText)
  If Mid(sText, siCount, 1) = "[" Then 
    Desktop.SendKeys("[bracketleft]")
  Else
    Desktop.SendKeys(Mid(sText, siCount, 1))
  Endif
Next

End

Public Sub Labels_MouseDown()
Dim sName As String = Last.name

sName = Replace(sName, "Label", "RadioButton")
AllRadio_Click(sName)

End
